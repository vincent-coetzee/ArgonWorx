///
///
///
///
///
///
MAIN MODULE Basics
    {
    SLOT basicSlot = "This is a module based slot"
    
    CONSTANT $NumericConstantNumber1 = 12.78876554
    CONSTANT $NumericConstantNumber2 = 189567
    
    MAIN METHOD begin() -> Void
        {
        doTheThing()
        runOfTheMill(with::things)
        LET result = createTheWidget()
        doWhatIsHard()
        returnToTheMoon()
        }
        
    PUBLIC ENUMERATION::Integer EntityClass
        {
        #legal(Integer,String) = 1
        #natural(String) = 2
        #sovereign(Person) = 3
        }
    ///
    ///
    /// Entity is a root class because it inherits
    /// from nothing, in reality it actually inherits
    /// from Object because all classes must
    ///
    ///
    CLASS Entity
        {
        SLOT name::String = "Entity Name"
        SLOT identityNumber::String = ""
        SLOT age::Integer = 47
        SLOT isSovereign?::Boolean = false
        
        CLASS SLOT overEverything = "This is some text"
        }
        
    CLASS LegalEntity::Entity
        {
        }
        
    CLASS Corporate::LegalEntity
        {
        }
        
    CLASS SovereignState::LegalEntity
        {
        }
        
    CLASS Person::LegalEntity
        {
        SLOT firstName::String
        }
    ///
    ///
    /// A TYPE is an alias for some TYPE construct defined
    /// elsewhere in the system. Typically a TYPE is defined
    /// as a shortcut for more complicated types.
    ///
    ///
    TYPE PersonList IS Array<Person>
    TYPE Sovereign IS SovereignState
    
    METHOD closureGenerator() -> (Integer,Integer) -> String
        {
        LET closure =
            {
            WITH(int1::Integer,int2::Integer) -> String
            LET string1 = string(from:: int1)
            LET string2 = string(from:: int2)
            print(Entity->overEverything)
            RETURN(string1 + string2)
            }
        RETURN(closure)
        }
        
    METHOD testingThings(argument::Object) -> Object
        {
        Basics->basicSlot = $NumericConstantNumber1
        LET name = "Jones"
        LET person = Person()
        person->firstName = name
        person->name = "Some Person or Other"
        person->identityNumber = "650103093888288288"
        person->age = 101
        person->age++
        HANDLE(#InvalidInvocation)
            {
            WITH(symbolName)
            print("A symbol was raised")
            print(symbolName)
            }
        begin()
        }
        
    METHOD print(=thing::Corporate) -> Integer
        {
        LET argument = Object()
        testingThings(argument::argument)
        }
        
    METHOD selectiveSwinging(input::Integer) -> Float
        {
        IF input > 433 && (input < 47 || input > 19)
            {
            print("It floogled again")
            }
        ELSE IF input > 1000
            {
            print("So far so good")
            }
        ELSE
            {
            print("It's not looking good.")
            }
        SELECT(input)
            {
            WHEN(21)
                {
                RETURN(21.5)
                }
            WHEN(50)
                {
                RETURN(105.5)
                }
            WHEN(1000)
                {
                RETURN(2005.5)
                }
            OTHERWISE
                {
                RETURN(0.)
                }
            }
        }
        
MODULE Secondary(/Users/vincent/Desktop/libXenon.dylib)
    {
    FUNCTION printString(PrintString)(string::String) -> Void
    FUNCTION countArrayElements(CountArrayElements)(array::Array<String>) -> Integer
    FUNCTION elementAtKey(ElementAtKey)(dictionary::Dictionary<String,Object>) -> Integer
    }
    }
